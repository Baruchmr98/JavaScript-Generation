Control de flujo

Estructuras de control: secuencial, condicional, repetitiva e instrucciones de salto.

- Tomar decisiones basadas en condiciones especificas, esto produce un codigo
 * tanto dinamico como adaptable
 * 
 * - Repetir acciones (estructuras de bucle) para iterar operaciones o procesar datos de una forma eficiente sin caer en la redaccion de codigo innecesario y repetitivo
 * 
 * - Facilitar el control de flujo de una operacion, brindandonos la oportunidad de ser
 * especificos en indicar qe instrucciones ejecutar y en que orden
 * 
 * - Optimizan el rendimiento de nuestro codigo, ya que evita oportunamente ejecutar instrucciones
 * en caso de que no se necesite
 * 
 * - Facilitar tanto la escritura de codigo como la claridad de este
 * 
 * Las estructuras de control que vamos a ver durante las sesiones de JS son las siguientes
 * 
 *      - Estructura if-else
 *      - Estructura switch
 *      - Estructuras de bucles (for, do, do while)
 * 
 * Para esta sesion, nos centraremos solo en las primeras 2 señaladas en la lista.

-> if-else-if
Se trata de la misma sentencia if-else declarada anteriormente. Lo que vamos a hacer diferente es, en este caso, anidar varias veces esta misma sentencia, lo que nos permitira tomar decisiones mas complejas.
Usaremos la contatenación.
Concatenar significa: "unir". Para unir cadenas en JavaScript el símbolo de más (+).

-> Sentencia switch.
Es un tipo de estructura de control de flujo.
No se basa en una bifurcación; se secciona en múltiples casos.
Declaración -> switch () {'case'}
Se empieza por colocar la palabra reservada switch, seguido colocamos parentesis () donde se debe colocar el valor que va indicar que caso/sentencia ejecutar.
Después, se colocan llaves {}, en donde se escribe el bloque de codigo. En él, se colocan los casos para cada valor de la variable de la siguiente forma: "case 'valor' :" caso a ejecutar si el valor empata con este caso.
Para indicar que la ejecución de las sentencias debe cortarse cuando se cumpla, se coloca 'break;'. 
Cuando terminemos de establecer los casos que necesitemos, debemos colocar el valor 'default:'. Nos permite establecer un valor por defecto, para los casos en que el valor asignado no empate con los de ninguno de los casos del bloque de código.

-> Operador terniario.
Es una expresión if-else más simple y legible. 
Se usa principalmente para simplificar condiciones de una sola expresión.
Declaración -> 'var,let o const' 'nombre' = () ? 'valor1 true' : 'valor2 false'




















